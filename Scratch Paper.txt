% Res is 1(true) if the N is greater than 0, meaning User can make the
% Unit.
availableUnit(Unit, MinAvailable, GasAvailable, Res) :- buildUnits(Unit, MinAvailable, GasAvailable, N), N>0, Res is 1.

% This returns the reversed order...
availableUnits(_, _, [], L, L).
availableUnits(MinAvailable, GasAvailable, [H|T], Acc, Result) :- availableUnit(H, MinAvailable, GasAvailable, 1) -> availableUnits(MinAvailable, GasAvailable, T, [H|Acc], Result); availableUnits(MinAvailable,GasAvailable,T,Acc,Result).

filterUserUnit(Race, MinAvailable, GasAvailable, Result) :- inspectRace(Race,ListofAllUnits), availableUnits(MinAvailable, GasAvailable, ListofAllUnits, [], Result).

% Reverse the order back.
filterUserUnitInOrder(Race, MinAvailable, GasAvailable, OrderedResult) :-
filterUserUnit(Race, MinAvailable, GasAvailable, Result), reverse(Result, OrderedResult).

% Calculate the resource spent; lower the number, more efficient the
% unit is.
resourceSpent(Unit, GasToMin, TotalHPleft, ResourceSpent) :-
    prop(Unit, mineral, MinCost),
	prop(Unit,gas,GasCost),
	UnitCost = MinCost+GasCost*GasToMin,
	prop(Unit,hp,UnitHP),
	prop(Unit,shield,UnitShield),
	UnitsLeft = ceiling(TotalHPleft/(UnitHP+UnitShield)),
	ResourceSpent is UnitsLeft*UnitCost.

% find the most cost efficient unit
min([],X,X,_,_).
min([H|T],M,X,GasToMin,TotalHPLeft)
:-
resourceSpent(H,GasToMin,TotalHPLeft, Unit1Cost),
resourceSpent(M,GasToMin,TotalHPLeft, Unit2Cost),
Unit1Cost =< Unit2Cost -> min(T,H,X,GasToMin,TotalHPLeft);min(T,M,X,GasToMin,TotalHPLeft).
costEfficientUnit([H|T],Unit,GasToMin,TotalHPLeft) :- min(T,H,Unit,GasToMin,TotalHPLeft).



Battlesimulation
 R is a list of elements. Each element has unit, HP total left, and resources leftover.


% Calculate the mineral spent; lower the number, more efficient the
% unit is.
mineralSpent(Unit,TotalHPleft, MineralSpent) :-
    prop(Unit, mineral, MinCost),
	prop(Unit,hp,UnitHP),
	prop(Unit,shield,UnitShield),
	UnitsLeft = ceiling(TotalHPleft/(UnitHP+UnitShield)),
	MineralSpent is UnitsLeft*MinCost.


% Calculate the gas spent; lower the number, more efficient the
% unit is.
gasSpent(Unit,TotalHPleft, GasSpent) :-
    prop(Unit, gas, GasCost),
	prop(Unit,hp,UnitHP),
	prop(Unit,shield,UnitShield),
	UnitsLeft = ceiling(TotalHPleft/(UnitHP+UnitShield)),
	GasSpent is UnitsLeft*GasCost.



------------

resourceSpent2(Unit, GasToMin, TotalHPleft, MineralSpent, GasSpent, ResourceSpent) :-
    prop(Unit, mineral, MinCost),
	prop(Unit,gas,GasCost),
	UnitCost = MinCost+GasCost*GasToMin,
	prop(Unit,hp,UnitHP),
	prop(Unit,shield,UnitShield),
	UnitsLeft = ceiling(TotalHPleft/(UnitHP+UnitShield)),
	MineralSpent is UnitsLeft*MinCost,
	GasSpent is UnitsLeft*GasCost,
	ResourceSpent is UnitsLeft*UnitCost.


% find the most cost efficient unit
min([],X,X,_,_).
min([H|T],M,X,GasToMin,TotalHPLeft)
:-
resourceSpent(H,GasToMin,TotalHPLeft, Unit1Cost),
resourceSpent(M,GasToMin,TotalHPLeft, Unit2Cost),
Unit1Cost =< Unit2Cost -> min(T,H,X,GasToMin,TotalHPLeft);min(T,M,X,GasToMin,TotalHPLeft).
costEfficientUnit([H|T],Unit,GasToMin,TotalHPLeft) :- min(T,H,Unit,GasToMin,TotalHPLeft).


---------------------------- No longer use the HPleft; use UnitLeft ------------------------------

% Calculate the mineral spent; lower the number, more efficient the
% unit is.
mineralSpent(Unit,UnitsLeft, MineralSpent) :-
	prop(Unit,mineral, MinCost),
	MineralSpent is UnitsLeft*MinCost.


% Calculate the gas spent; lower the number, more efficient the
% unit is.
gasSpent(Unit,UnitsLeft, GasSpent) :-
	prop(Unit, gas, GasCost),
	GasSpent is UnitsLeft*GasCost.

% Calculate the resource spent; lower the number, more efficient the
% unit is.
resourceSpent(Unit, GasToMin, UnitsLeft, ResourceSpent) :-
    prop(Unit,mineral, MinCost),
	prop(Unit,gas,GasCost),
	UnitCost = MinCost+GasCost*GasToMin,
	ResourceSpent is UnitsLeft*UnitCost.

% Calculate the resource spent, returning the Mineral and Gas spent
% separate.
resourceSpent2(Unit, GasToMin, UnitsLeft, MineralSpent, GasSpent, ResourceSpent) :-
	prop(Unit, mineral, MinCost),
	prop(Unit,gas,GasCost),
	UnitCost = MinCost+GasCost*GasToMin,
	MineralSpent is UnitsLeft*MinCost,
	GasSpent is UnitsLeft*GasCost,
	ResourceSpent is UnitsLeft*UnitCost.

% Calculate the resources left, after the battle
resourceLeft(Unit, GasToMin, UnitsLeft, MinAv, MinLeft, GasAv, GasLeft, ResourceLeft) :-
	prop(Unit, mineral, MinCost),
	prop(Unit,gas,GasCost),
	UnitCost = MinCost+GasCost*GasToMin,
	ResourceAv = MinAv+GasAv*GasToMin,
	MineralSpent is UnitsLeft*MinCost,
	GasSpent is UnitsLeft*GasCost,
	ResourceSpent is UnitsLeft*UnitCost,
	MinLeft is MinAv-MineralSpent,
	GasLeft is GasAv-GasSpent,
	ResourceLeft is ResourceAv-ResourceSpent.



% find the most cost efficient unit
min([],X,X,_,_).
min([H|T],M,X,GasToMin,UnitsLeft) :-
resourceSpent(H,GasToMin,UnitsLeft, Unit1Cost),
resourceSpent(M,GasToMin,UnitsLeft, Unit2Cost),
Unit1Cost =< Unit2Cost -> min(T,H,X,GasToMin,UnitsLeft);min(T,M,X,GasToMin,UnitsLeft).
costEfficientUnit([H|T],Unit,GasToMin,UnitsLeft) :- min(T,H,Unit,GasToMin,UnitsLeft).


% Return the cost efficiency of the unit.
costEfficiency(Unit,MinAv,GasAv,GasToMin,Result).

costEfficiency(Unit,MinAv,GasAv,GasToMin,(Unit,MinLeft,GasLeft)) :-

% Return the cost efficiency of the unit.
costEfficiency(Unit, GasToMin, UnitsLeft, MinAv, GasAv, (Unit,MinLeft,GasLeft,ResourceLeft,UnitsLeft)) :-
	prop(Unit, mineral, MinCost),
	prop(Unit,gas,GasCost),
	UnitCost = MinCost+GasCost*GasToMin,
	ResourceAv = MinAv+GasAv*GasToMin,
	MineralSpent is UnitsLeft*MinCost,
	GasSpent is UnitsLeft*GasCost,
	ResourceSpent is UnitsLeft*UnitCost,
	MinLeft is MinAv-MineralSpent,
	GasLeft is GasAv-GasSpent,
	ResourceLeft is ResourceAv-ResourceSpent.

% Return the list of all units' cost efficiency
costEfficiencyList(ListFromBS,MinAv,GasAv,GasToMin,[R1|R])




Unit => UnitStat = (Unit,UnitsLeft,EUnitLeft)
Match the result list from BS
costEfficiencyList([],_,_,_,[]).
costEfficiencyList([(Unit,UnitsLeft)|T],MinAv,GasAv,GasToMin,[R1|R]) :-
	costEfficiency(Unit, GasToMin, UnitsLeft, MinAv, GasAv, R1),
	costEfficiencyList(T,MinAv,GasAv,GasToMin,R).

?- costEfficiencyList([(probe,2),(zealot,3)],500,0,3.5,Res).


GOTTA CHANGE the CALULATION for Min Gas ResourceSpent (Rn it calculate how much spent to make the left units...?)

buildUnits(Unit,MinAv,GasAv,N),
MinLeft is N*MinCost-MinSpent,
GasLeft is N*GasCost-GasSpent,
ResourceLeft is (N*MinCost+N*GasCost*GasToMin-ResourceSpent).